#!/usr/bin/env python

import sys
import clang.cindex
from clang.cindex import CursorKind


def main(argv):
    index = clang.cindex.Index.create()
    tu = index.parse(None, argv)  # a Translation Unit
    for c in tu.cursor.get_children():
        print_tags(c, tu.spelling)


def print_tags(cursor, filename):
    if not cursor.location.file or cursor.location.file.name != filename:
        return

    if is_definition(cursor):
        parents = semantic_parents(cursor)
        print tag_entry(cursor,
                        "::" + "::".join(parents + [cursor.displayname]))
        for i in range(len(parents) + 1):
            print tag_entry(cursor,
                            "::".join(parents[i:] + [cursor.displayname]))

    if is_named_scope(cursor):
        for c in cursor.get_children():
            print_tags(c, filename)


def is_definition(cursor):
    return cursor.is_definition() and not cursor.kind in [
        CursorKind.CXX_ACCESS_SPEC_DECL,
        ]


def semantic_parents(cursor):
    import collections

    p = collections.deque()
    c = cursor.semantic_parent
    while c and is_named_scope(c):
        p.appendleft(c.displayname)
        c = c.semantic_parent
    return list(p)


def is_named_scope(cursor):
    return cursor.kind in [
        CursorKind.NAMESPACE,
        CursorKind.STRUCT_DECL,
        CursorKind.CLASS_DECL,
        ]


def tag_entry(cursor, t):
    """The complete tags file entry for symbol t."""
    return "%s %d,%d" % (
        t,
        cursor.location.line, cursor.location.offset)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
