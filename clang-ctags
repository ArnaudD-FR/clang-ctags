#!/usr/bin/env python

import StringIO
import sys

import clang.cindex
from clang.cindex import CursorKind


def main(argv):
    index = clang.cindex.Index.create()
    tu = index.parse(None, argv[1:])  # a Translation Unit
    if len(tu.diagnostics) > 0:
        for d in tu.diagnostics:
            debug(d.spelling)
        error("File '%s' failed clang's parsing and type-checking" %
              tu.spelling)

    formatter = Etags(tu.spelling)
    for c in tu.cursor.get_children():
        do_tags(c, formatter, tu.spelling)
    print formatter.getvalue()


def do_tags(cursor, formatter, filename):
    if not cursor.location.file or cursor.location.file.name != filename:
        return

    if is_definition(cursor):
        parents = semantic_parents(cursor)
        formatter.tag(cursor, "::" + "::".join(parents + [cursor.displayname]))
        for i in range(len(parents) + 1):
            formatter.tag(cursor, "::".join(parents[i:] + [cursor.displayname]))

    if is_named_scope(cursor):
        for c in cursor.get_children():
            do_tags(c, formatter, filename)


def is_definition(cursor):
    return cursor.is_definition() and not cursor.kind in [
        CursorKind.CXX_ACCESS_SPEC_DECL,
        ]


def semantic_parents(cursor):
    import collections

    p = collections.deque()
    c = cursor.semantic_parent
    while c and is_named_scope(c):
        p.appendleft(c.displayname)
        c = c.semantic_parent
    return list(p)


def is_named_scope(cursor):
    return cursor.kind in [
        CursorKind.NAMESPACE,
        CursorKind.STRUCT_DECL,
        CursorKind.CLASS_DECL,
        ]


class Etags:
    """Write tags in the format understood by Emacs.

    See http://bzr.savannah.gnu.org/lh/emacs/trunk/annotate/head:/etc/ETAGS.EBNF
    """

    def __init__(self, filename):
        with open(filename) as f:
            self.lines = f.readlines()
        self.out = StringIO.StringIO()
        self.out.write("\x0c\x0a" + filename + ",\x0a")

    def getvalue(self):
        return self.out.getvalue()

    def tag(self, cursor, tagname):
        """The complete tags file entry for symbol 'tag'."""
        self.out.write("%s\x7f%s\x01%d,%d\x0a" % (
                self.lines[cursor.location.line - 1].rstrip(),
                tagname,
                cursor.location.line, cursor.location.offset))


def debug(s):
    sys.stderr.write(s + "\n")


def error(s):
    from os.path import basename
    sys.stderr.write("%s: Error: %s\n" % (basename(sys.argv[0]), s))
    sys.exit(1)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
